{"version":3,"sources":["img/delete.svg","img/check.svg","img/check-done.svg","img/add-item.svg","components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClick","onDelete","url","checkImg","isComplete","checkCompleteImg","className","classNames","src","width","height","alt","title","deleteItem","Component","App","state","newItem","currentFilter","todoItems","onKeyUp","bind","onChange","onShowAll","onActive","onAddAll","onComplete","onClearCompleted","index","indexOf","console","log","setState","slice","newTdodoItems","newTdodoItems1","splice","event","keyCode","text","target","value","trim","map","filter","reverse","curentFilterTodo","onReverseTodoItem","length","tick","style","opacity","type","placeholder","isHidden","key","onItemClick","onDeleteItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00f6dadf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.704598b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.fd5e3bef.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-done.8b4d6e74.svg\";","module.exports = __webpack_public_path__ + \"static/media/add-item.93fba164.svg\";","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\nimport deleteItem from '../img/delete.svg';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport checkImg from '../img/check.svg';\r\nimport checkCompleteImg from '../img/check-done.svg';\r\n\r\nclass TodoItem extends Component {\r\n  render () {\r\n    const {item, onClick, onDelete} = this.props;\r\n    let url = checkImg;\r\n    if (item.isComplete) {\r\n      url = checkCompleteImg;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={classNames ('TodoItem', {\r\n          ' TodoItem-complete': item.isComplete,\r\n        })}\r\n      >\r\n        <img onClick={onClick} src={url} width={32} height={32} alt=\"text\" />\r\n        <p>{this.props.item.title}</p>\r\n        <img\r\n          className=\"button-delete\"\r\n          src={deleteItem}\r\n          height={16}\r\n          width={16}\r\n          alt=\"text\"\r\n          onClick={onDelete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  item: PropTypes.shape ({\r\n    isComplete: PropTypes.bool.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n  }),\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport TodoItem from './components/TodoItem';\r\nimport tick from './img/add-item.svg';\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      newItem: '',\r\n      currentFilter: '',\r\n      todoItems: [\r\n        // {\r\n        //   title: \"Mua bim bim\",\r\n        //   isComplete: false\r\n        // },\r\n        // {\r\n        //   title: \"Đi đá bóng\",\r\n        //   isComplete: true\r\n        // },\r\n        // {\r\n        //   title: \"Đi chơi với gấu\",\r\n        //   isComplete: false\r\n        // },\r\n        // {\r\n        //   title: \"Chơi game\",\r\n        //   isComplete: true\r\n        // },\r\n        // {\r\n        //   title: \"Đấm nhau\",\r\n        //   isComplete: false\r\n        // }\r\n      ],\r\n    };\r\n\r\n    this.onKeyUp = this.onKeyUp.bind (this);\r\n    this.onChange = this.onChange.bind (this);\r\n    this.onShowAll = this.onShowAll.bind (this);\r\n    this.onActive = this.onActive.bind (this);\r\n    this.onAddAll = this.onAddAll.bind (this);\r\n    this.onComplete = this.onComplete.bind (this);\r\n    this.onClearCompleted = this.onClearCompleted.bind (this);\r\n    // this.onDeleteItem = this.onDeleteItem.bind(this);\r\n  }\r\n\r\n  onItemClick (item) {\r\n    // return event => {\r\n    const isComplete = item.isComplete;\r\n    const {todoItems} = this.state;\r\n    const index = todoItems.indexOf (item);\r\n    console.log (index, item);\r\n    this.setState ({\r\n      todoItems: [\r\n        ...todoItems.slice (0, index),\r\n        {\r\n          ...item,\r\n          isComplete: !isComplete,\r\n        },\r\n        ...todoItems.slice (index + 1),\r\n      ],\r\n    });\r\n    // };\r\n  }\r\n\r\n  onDeleteItem (item) {\r\n    // const index = this.state.todoItems.indexOf(item);\r\n    // this.setState({\r\n    //   todoItems: this.state.todoItems.splice(index, 1)\r\n    // });\r\n    // return () => {\r\n    const newTdodoItems = [...this.state.todoItems];\r\n    const index = this.state.todoItems.indexOf (item);\r\n    const newTdodoItems1 = newTdodoItems.splice (index, 1);\r\n    console.log (newTdodoItems1);\r\n    console.log (newTdodoItems);\r\n    console.log (item);\r\n    this.setState ({\r\n      ...this.state,\r\n      todoItems: newTdodoItems,\r\n    });\r\n    // };\r\n  }\r\n\r\n  onKeyUp (event) {\r\n    const ENTER_KEY = 13;\r\n    if (event.keyCode === ENTER_KEY) {\r\n      let text = event.target.value;\r\n      if (!text) {\r\n        return;\r\n      }\r\n\r\n      text = text.trim ();\r\n      if (!text) {\r\n        return;\r\n      }\r\n\r\n      this.setState ({\r\n        newItem: '',\r\n        todoItems: [{title: text, isComplete: false}, ...this.state.todoItems],\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange (event) {\r\n    this.setState ({\r\n      newItem: event.target.value,\r\n    });\r\n  }\r\n\r\n  onAddAll () {\r\n    this.setState ({\r\n      ...this.state,\r\n      todoItems: this.state.todoItems.map (\r\n        item =>\r\n          (item = {\r\n            ...item,\r\n            isComplete: true,\r\n          })\r\n      ),\r\n    });\r\n  }\r\n  onShowAll () {\r\n    this.setState ({\r\n      ...this.state,\r\n      currentFilter: 'all',\r\n    });\r\n  }\r\n\r\n  onActive () {\r\n    // let activeTodo = [...this.state.todoItems];\r\n    // console.log(activeTodo);\r\n    this.setState ({\r\n      ...this.state,\r\n      newItem: '',\r\n      currentFilter: 'active',\r\n      // todoItems: filter(item => item.isComplete === false)\r\n    });\r\n  }\r\n\r\n  onComplete () {\r\n    // let completeTodo = [...this.state.todoItems];\r\n    // console.log(completeTodo);\r\n    this.setState ({\r\n      ...this.state,\r\n      newItem: '',\r\n      currentFilter: 'completed',\r\n      // todoItems: filter(item => item.isComplete === true)\r\n    });\r\n  }\r\n\r\n  onClearCompleted () {\r\n    this.setState ({\r\n      ...this.state,\r\n      todoItems: this.state.todoItems.filter (\r\n        item => item.isComplete === false\r\n      ),\r\n    });\r\n  }\r\n\r\n  onReverseTodoItem(){\r\n    this.setState({\r\n      todoItems: this.state.todoItems.reverse()\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const {todoItems, newItem, currentFilter} = this.state;\r\n    let curentFilterTodo = todoItems;\r\n    if (currentFilter === 'active') {\r\n      curentFilterTodo = todoItems.filter (item => item.isComplete === false);\r\n    }\r\n    if (currentFilter === 'completed') {\r\n      curentFilterTodo = todoItems.filter (item => item.isComplete === true);\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>todos</h1>\r\n        {/* <div>{currentFilter}</div> */}\r\n        <button onClick={() => this.onReverseTodoItem()}>Reverse</button>\r\n        <div className=\"Header\">\r\n          {this.state.todoItems.length > 0 &&\r\n            <img\r\n              src={tick}\r\n              height={32}\r\n              width={32}\r\n              alt=\"text\"\r\n              onClick={this.onAddAll}\r\n            />}\r\n          {this.state.todoItems.length === 0 && <div style={{opacity: 0}} />}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"What needs to be done ?\"\r\n            value={newItem}\r\n            onChange={this.onChange}\r\n            onKeyUp={this.onKeyUp}\r\n          />\r\n        </div>\r\n\r\n        {curentFilterTodo.map (\r\n          (item, index) =>\r\n            !this.state.isHidden &&\r\n            <TodoItem\r\n              key={index}\r\n              item={item}\r\n              onClick={() => {\r\n                this.onItemClick (item);\r\n              }}\r\n              onDelete={() => {\r\n                this.onDeleteItem (item);\r\n              }}\r\n            />\r\n        )}\r\n\r\n        {this.state.todoItems.length > 0 &&\r\n          <div className=\"Footer\">\r\n            <div className=\"items-left\">\r\n              {todoItems.filter (item => item.isComplete === false).length >\r\n                1 &&\r\n                <p>\r\n                  {todoItems.filter (item => item.isComplete === false).length}\r\n                  {' '}\r\n                  items left\r\n                </p>}\r\n\r\n              {todoItems.filter (item => item.isComplete === false).length <=\r\n                1 &&\r\n                <p>\r\n                  {todoItems.filter (item => item.isComplete === false).length}\r\n                  {' '}\r\n                  item left\r\n                </p>}\r\n            </div>\r\n\r\n            <div className=\"Button\">\r\n              <button onClick={this.onShowAll}>All</button>\r\n              <button onClick={this.onActive}>Active</button>\r\n              <button onClick={this.onComplete}>Completed</button>\r\n              <button onClick={this.onClearCompleted}>Clear completed</button>\r\n            </div>\r\n          </div>}\r\n        {this.state.todoItems.length === 0 && <div style={{opacity: 0}} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}